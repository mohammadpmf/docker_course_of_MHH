S1   E1 مقدمه دوره داکر
S1   E2 پیش نیاز دوره
S1   E3 حل مشکل اسپات پلیر
------------------------------------------------------------------------------------------------------------------------------
S2   E4 داکر چیست و چرا بهش نیاز داریم؟
لازم نیست دوباره ببینم. اما توضیحات خیلی خوبی داشت و مفهوم رو مثل همیشه خوب توضیح داد.
S2   E5 نصب داکر
نگاه نکنم. هیچ نکته خاصی نداشت. وقت کشی. خلاصه که گفت خودتون نصب کنید.
S3   E6 کاربرد ایمیج و کانتینر
توضیحات خوبی داشت. لازم نیست دوباره ببینم. اما جالب بود. نکته مهمش این بود. برای اجرای دستور توسط داکر مینویسیم داکر ران ...
مثلا:
docker run python manage.py runserver
S2   E7 مثال عملی داکر
خیلی خوب بود. دوباره هم ببینم بهتره. خلاصه دستورات رو هم مینویسم.
برای این که بتونیم ایمیج بسازیم یه فایل میسازیم به اسم Dockerfile داخل اون میگیم که چه چیزهایی رو میخوایم و چه کارهایی بکنه.
برای این که از رو داکرفایل برامون یه ایمیج بسازه، مثلا مینویسیم.
docker build -t my_image_name .
داکر بیلد که ثابت هست. -t بهش میگیم اسم ایمیجمون رو چی بذاره و در آخر بهش میگیم که داکرفایلمون کجا هست که چون تو همون پوشه داشت اجرا میکرد نقطه گذاشت. نکته ای که داره اینه که لازم نیست بهش بگیم اسم فایلمون داکرفایل هست ما آدرس جایی رو بهش میدیم که Dockerfile توش هست.
نکته خودم. وقتی دستور
docker run first_test_image رو اجرا کردم بهم ارور میداد. چون از اینپوت استفاده کرده بودم. با اجرای docker run -it first_test_image
مشکل رفع شد چون اینتر اکتیو و تعاملی بود. تو حالت اول ترمینال تعاملی نبود و اینپوت نمیتونست بگیره.
------------------------------------------------------------------------------------------------------------------------------
S3   E8 آشنایی با کرنل
لازم نیست ببینم دوباره. توضیحات خوبی داشت. اما لازم نیست.
S3   E9 دستورات پایه
docker images ایمیج هایی که روی داکرمون به صورت لوکال داریم رو نشون میده.
docker version ورژن داکر نصب شده روی سیستم رو نشون میده.
docker run -it ... به صورت اینتراکتیو یک ایمیج رو اجرا میکنه. مثلا همون اوبونتو رو وقتی میزنم docker run ubuntu اجرا میشه و چون کاری انجام نمیده تموم میشه. اما وقتی میزنم docker run -it ubuntu به صورت تعاملی میرم توش و دیگه تو اوبونتو هستم.
چند تا دستور لینوکسی هم این وسط بنویسم:
ls برای لیست کردن. فلگ هم میشه بهش داد. مثلا ls -a که فایل های مخفی رو هم نشون میده یا ls -b یا ls -1 یا ls -l و غیره.
history برای آوردن دستوراتی که زدیم. cd که بلدم. pwd print working directory هست.
whoami برای این که بگه چه یوزری هستم. (هو اَم آی)
برای آدرس دهی مطلق در cd هم میتونیم اول اسلش رو بزنیم. میره از تو روت شروع میکنه.
S3  E10 تغییر مسیر در لینوکس
دستور docker ps پراسس های داکر رو نشون میده. یعنی کانتینرهایی که در حال اجرا هستند.
docker ps -a پراسس های داکر که قبلا ران شده بودند رو هم نشون میده. البته فعلی ها رو هم نشون میده.
S3  E11 نصب کردن پکیج جدید
دستورات لینوکس هست بیشتر این فیلم. اما مهم و جالب که بلد نبودم. راجع به فولدر bin لینوکس توضیح داد که جالب بود و گفت که برنامه ها چه طوری اجرا میشن.
برای دیدن کمک هم میشه اسم دستور رو نوشت و بعد دش دش هلپ. غیر از دستور اکو که چاپش میکنه 😂 برای این و دستورای بیلت این مشابه باید بنویسیم help echo
برای نصب مینویسیم apt install اسمش. منتهی این لینوکسی که ما نصب کردیم همه پکیج ها رو نمیشناسه و آپدیت نیست. با apt list هم میتونیم وضعیت پکیج ها رو ببینیم. با apt update وضعیتشون رو به صورت لوکال آپدیت میکنه. بعد دوباره اگه apt list بزنیم میبینیم که ۸۰ برابر پکیج بهمون نشون میده. خلاصه پایتون ندارم. اما الان با apt install python3 نصب میشه. دقت کنم که ورژن ۳ هم مهمه. البته نذاشتم ارور داده بود. احتمالا دنبال ۲ میگشت که دیگه آپدیت نداشت و اینم بی خیال شد. در کل ویدیو خیلی خوبی بود.
S3  E12 ساخت و اجرای فایل پایتون
دستور touch لینوکس که اینم یک نرم افزار هست، باهاش میشه فایل ساخت. تمرین کرد تمرین نصب nodejs رو داد. جالب بود. در کل ویدیو خیلی خوبی بود.
S3  E13 استفاده از نانو
بد نبود. برای حذف یک برنامه apt remove esme_barnameh.
S3  E14 کار با فایل ها
دستورات بیشتر لینوکسی
mv دستور انتقال در لینوکس
rm دستور حذف فایل در لینوکس
rm -r به صورت ریکرسیو پاک میکنه.
rm -rf به صورت ریکرسیو هست و فورس هم میکنه. 😁
cat file کل اطلاعات داخل فایل رو میخوونه.
head file_name -n 4 فقط ۴ خط اول فایل رو میخونه.
tail file_name -n 8 فقط ۸ خط آخر فایل رو میخونه.
more file_name فایل رو میخونه ولی صفحه اولش رو فقط نشون میده. اسپیس رو بزنیم میره صفحه بعد و ...
یه برنامه دیگه هم درست کردن به اسم less که باید نصبش کرد این قابلیت بالا بردن هم داره 😁 دیگه نصبش نکردم.
S3  E15 اجرای مجدد یک کانتینر
با دستور docker start image_id_of_container میتونیم یه کانتینر رو دوباره اجرا کنیم. البته اگه تعاملی میخوایم docker start -i image_id.
البته از بین ایمیج آی دی های لوکال میاره. به خاطر همین لازم نیست کامل بنویسیم. اگه ۳ ۴ تا حرف اول ایمیج رو بنویسیم و تکراری نباشه خودش میفهمه که کدوم رو باید ران کنه.
S3  E16 متغیرهای محیطی
دستور printenv در لینوکس تمام متغیرهای محیطی رو نشون میده.
اگه متغیر محیطی خاصی رو هم بخوایم مثل PATH میتونیم بنویسیم printenv PATH یا هر چیز دیگه ای که در این حالت فقط مقدار اون رو برامون مینویسه. (بدون خود کلیدی که ما گفتیم)
با دستور export HARCHI=harchi_ke_delam_mikhad متغیر محیطی HARCHI به طور موقت اضافه میشه به متغیرهای محیطی. دائم چه طوریه. الان میگم. قبلش توضیح داره. برای رفتن به پوشه home برای هر اکانت در لینوکس میتونیم از تیلدا استفاده کنیم. cd ~ ما رو میبره به دایرکتوری home. توی home یه فایل هیدن داریم به اسم .bashrc که داخل اون متغیرهای محیطی نوشته شدند. و وقتی ترمینال باز میشه از این تو متغیرهای محیطی رو میخوونه. میتونیم به این فایله اضافه کنیم. حالا با اکو یا نانو یا هرچیزی. نکته ای که داره اینه که وقتی اضافه میکنیم همون لحظه نمیشناسه. چون موقع باز شدن ترمینال که اون موقع نبود این فایل رو خوونده بود. اگه از لینوکس بیام بیرون و دوباره برم توش اوکی هست. اما اگه نخوایم ترمینال رو ببندیم و دوباره باز کنیم میتونیم با دستور سورس اجراش کنیم که مجدد متغیر های محیطی رو آپدیت کنه. مثلا source .bashrc که دوباره اجراش میکنه. البته با فرض این که تو home باشم. اگه نباشم که میشه با نوشتن source ~/.bashrc اجراش کنم. نکته آخر هم اینکه برای نشون دادن متغیرهای محیطی ای که اضافه کرده بود از echo $env_name استفاده کرد. منم کردم جواب داد. اما printenv env_name برای متغیرهایی که خودم اضافه کردم چیزی نمیاورد.
نکته بعد از ویدیو. اشتباهی یه بار نوشتم cd خالی و چیزی ننوشته بودم. خودش ما رو میبره به home یعنی ~
S3  E17 استفاده از grep
مخفف global regular expression print هست. برای سرچ کردن. نحوه استفاده ازش این طوریه. grep matni_ke_mikhaym file_i_ke_toosh_mikhaym_begarde
حالا اگه بخوایم اینسنسیتیو باشه یه -i به عنوان فلگ به گرپ میدیم. اگه چیزی هم که دنبالش میگردیم عبارت هست میتونیم از کوتیشن یا دابل کوتیشن دورش استفاده کنیم. برای سرچ در چند تا فایل هم بعد از نوشتن اسم فایل اول، فایل دوم و بقیه رو میدیم و به تفکیک فایل میگه که چی پیدا کرده.
اگه بخوایم تو فولدر بگرده grep matn dir_name/ رو وقتی مینویسیم ارور میده میگه دایرکتوری هست. باید بهش بگیم ریکرسیو بگرده یعنی grep matn -r dir_name/ و این طوری اون دایرکتوری رو میگرده. grep matn -r . هم تو همین پوشه فعلی میگرده.
S3  E18 پیدا کردن فایل با نام
برای پیدا کردن فایل یا دایرکتوری با نام خاص از دستور find استفاده میشه. find خالی میاد تمام فایل ها و دایرکتوری ها و فایل های داخل دایرکتوری ها و دایرکتورهاش رو و ... رو به صورت ریکرسیو به ما میده. اما میتونیم از فلگ -type d استفاده کنیم که فقط دایرکتوری ها رو بده یا از فلگ -type با مقدار f استفاده کنیم که فقط فایل ها رو بده. اگه بخوایم بر اساس نام باشه از فلگ -name استفاده میکنیم بعدش هم قاعدتا اسم فایل رو میدیم. حالا اگه ندونیم میتونیم از re استفاده کنیم. مثلا find -name "*.py" تمام فایل های پایتون رو میده. (دایرکتوری ننوشتم چون اغلب برای دایرکتوری پسوند py نمیذاریم 😁 اما اگه فلگ -type رو با مقدار f بهش ندم خودش هم فایل و هم دایرکتوری ها رو میگرده.) یا find -name "main*" تمام فایل و دایرکتوری هایی که با کلمه main شروع شدن رو میده.
S3  E19 استفاده از پایپ
جالب بود. برای ترکیب سرچ و grep خیلی استفاده میشه. کوتاه بود. کار کنم دستم میاد. خلاصه اش اینه که ما میتونیم بهش بگیم یه سری فایل و دایرکتوری رو پیدا کنه. بعد به جای این که پرینت کنه، یه پایپ میذاریم و بعدش مثلا گرپ رو مینویسیم. در واقع خورجوی چپی رو به عنوان ورودی راستی میده. مثلا cat main.txt | grep fallh کل فایل main.txt رو میخوونه و توی اون دنبال fallah میگرده و به ما جواب میده.
S3  E20 ساخت یوزر جدید
با دستور useradd username میشه یوزر جدید ساخت. مثلا یکی Mohammad ساختم. که بیچاره home هم نداشت و به هیچ جایی دستش بند نبود. نه میتونستم فایل بسازم نه دایرکتوری. فقط بعضی جاها رو با cd میتونستم ببینم. با دستور useradd -m username یه دایرکتوری تو home براش میسازه. مثلا یکی هم madval ساختم. با این یکی توی home که رفتم، یه پوشه به اسم madval بود که داخل اون میتونستم فایل یا دایرکتوری بسازم و داخلش چیز بنویسم. یا مثلا فایل پایتون ساختم و با برنامه پایتون اجراش کردم. ولی وقتی از دایرکتوری madval یکی برمیگشتم عقب یعنی تو home. اونجا ubuntu رو میدیدم. اما اجازه نداشتم داخلش حتی cd بکنم. حالا چه طوری من اصلا با یوزرهای دیگه کار کردم. بریم قسمت داکرش:
با دستور docker exec میتونیم یه دستوری رو بگیم که اجرا کنه. مثلا الان میخوایم با همین یوزر جدید وارد بشیم. منتهی برای این که اینتر اکتیو باشه از فلگ it هم استفاده میکنیم. در واقع اول نوشتم docker exec ee0 bash که ee0 شماره کانتینرم بود و بش هم که اسم ترمینال لینوکس هست. بهش گفتم که تو کانتینر ee0 بش رو اجرا کن. اما چون اینتراکتیو نبود خارج شد. بعد نوشتم docker exec -it ee0 bash که ترمینال رو داشتم. منتهی با یوزر روت وارد شد. میتونیم با فلگ -u بهش بگیم که چه یوزری باشه. مثلا با دستور docker exec -it -u Mohammad ee0 bash با یوزر محمد وارد شدم. اگه یوزری روت نباشه، قبل از دستورات علامت دلار میذاره. برای روت هشتگ میذاشت.
نکته آخر. دستور userdel برای پاک کردن یک یوزر هست. که قاعدتا اسم یوزر رو به عنوان ورودی بعدی به دستورش میدیم.
S3  E21 ساخت گروه
با دستور groupadd group_name میتونیم یه گروه بسازیم. مثلا groupadd devops گروه برای دواپس میسازه.
با دستور usermod -G groupname username میتونیم یوزر رو مدیفای کنیم و گروه groupname رو دسترسیش رو به یوزر username بدیم.
با دستور groups username میتونیم گروه هایی که اون یوزرنیم عضوش هست رو ببینیم.
نکته. برای هر یوزری که میسازیم خود لینوکس یه گروه هم به اسم اون یوزر میسازه. مثلا یه گروه به اسم madval هم داریم که خود لینوکس بعد از ساخت یوزر madval ساختتش.
S3  E22 مدیریت دسترسی ها
وقتی ls -l میزنیم. سمت چپ اطلاعاتی که مینویسه به صورت مقابل هست. drwxrwxrwx حرف اول نشان دهنده نوع فایل یا دایرکتوری هست. d یعنی دایرکتوری هست. اگه - باشه یعنی فایل هست. بعضی ها هم l بودند سرچ که کردم دیدم c, b, p, s هم داریم که توضیحشون رو نمینویسم 👏
۳ حرف بعدی میگه دسترسی read و write و execute سازنده ی اون فایل یا دایرکتوری چی باشه. هر کودوم که خود حرف باشه یعنی اون دسترسی رو داره. هر کودوم که - باشه یعنی اون دسترسی رو نداره. ۳ تای بعدی هم همین طور. منتهی برای گروه. ۳ حرف آخر هم همین طور منتهی برای others. یعن کسی که نساختتش و جزو اون گروه هم نیست چه کاری بتونه بکنه. برای دایرکتوری ها execute یعنی این که بتونه بره داخلش یا نه.
حالا این شد از نحوه خووندنش. نحوه تغییر چه طوری هست. از دستور chmod که چنج مد هست استفاده میکنیم. chmod u+x some_file_or_som_directory یعنی برای گروه یوزر (همون کاراکترهای ۲ تا ۴ یعنی کسی که ساخته.) دسترسی اکزکیوت رو اضافه کن. u اول نشان دهنده یوزر هست. اگه g بذاریم میشه گروپ یعنی ۵ تا ۷ و o برای others هست. اگه o بذاریم یعنی ۸ تا ۱۰ رو تغییر بده. + یعنی اضافه کنه دسترسی رو. - هم میشه گذاشت یعنی کم کنه. آخرین حرف هم که نوع دسترسی هست. همزمان هم میشه نوشت. مثلا chmod ugo+rwx test.sh main.pyاجازه همه کار روی فایل test.sh و main.py رو به همه میده.
------------------------------------------------------------------------------------------------------------------------------
S4  E23 نمونه پروژه واقعی
S4  E24 درخواست از شما دوست عزیزم
S4  E25 اجرای پروژه در حالت واقعی
S4  E26 استفاده از ایمیج مناسب
شروع از اینجا یعنی ۲۶
S4  E27 کپی فایل ها در داکر فایل